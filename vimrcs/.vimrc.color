""""""""""""""""""""""""""""""""""""""""""""""""""
" General colorscheme
""""""""""""""""""""""""""""""""""""""""""""""""""

""" MONOKAI
set t_Co=256
set background=dark
colorscheme monokai
hi Normal ctermbg=NONE
hi nonText ctermbg=NONE
hi Pmenu ctermfg=15 ctermbg=56 guifg=#ffffff guibg=#000000
hi Comment ctermfg=111 ctermbg=NONE cterm=NONE guifg=#75715e guibg=NONE gui=NONE
hi SpecialKey ctermfg=59 ctermbg=NONE cterm=NONE guifg=#49483e guibg=#3c3d37 gui=NONE
hi DiffChange cterm=NONE ctermfg=white ctermbg=0

" Show syntax highlighting groups for word under cursor
nmap <C-S-P> :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

""""""""""""""""""""""""""""""""""""""""""""""""""
" C++ highlighting
""""""""""""""""""""""""""""""""""""""""""""""""""
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1
let g:cpp_experimental_simple_template_highlight = 1

hi! cCustomFunc  ctermfg=178 ctermbg=NONE
hi! cCustomClass  ctermfg=81 ctermbg=NONE

""""""""""""""""""""""""""""""""""""""""""""""""""
" Highlight of errors
""""""""""""""""""""""""""""""""""""""""""""""""""

" highlight unwanted spaces
highlight UnwantedSpaces ctermbg=red ctermfg=white
call matchadd('UnwantedSpaces', ' \| ', 51)
highlight TrailingSpaces ctermbg=green
call matchadd('TrailingSpaces', '\s\+$', 52)

" highlight line too long (120 char)
highlight OverLength ctermbg=blue ctermfg=white guibg=#592929
call matchadd('OverLength', '\%121v.\+', 53)


""""""""""""""""""""""""""""""""""""""""""""""""
" Rainbow parenthesis configuration
""""""""""""""""""""""""""""""""""""""""""""""""

let g:rainbow_conf = {
\	'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'firebrick'],
\	'ctermfgs': ['brown', 'lightblue', 207, 'lightgreen', 98],
\	'operators': '_,_',
\	'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
\	'separately': {
\		'*': {},
\		'tex': {
\			'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
\		},
\		'lisp': {
\			'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
\		},
\		'vim': {
\			'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
\		},
\		'html': {
\			'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
\		},
\		'css': 0,
\	}
\}

let g:rainbow_active = 1


""""""""""""""""""""""""""""""""""""""""""""""""""
" Colorize line numbers depending on mode
""""""""""""""""""""""""""""""""""""""""""""""""""

function! SetCursorLineNrColorInsert(mode)
    " Insert mode: white
    if a:mode == "i"
        highlight CursorLineNr cterm=none ctermfg=15
        highlight LineNr cterm=none ctermfg=15
    " Replace mode: red
    elseif a:mode == "r"
        highlight CursorLineNr cterm=none ctermfg=1
        highlight LineNr cterm=none ctermfg=1
    endif
endfunction

function! SetCursorLineNrColorVisual()
    set updatetime=0
    " Visual mode: green
    highlight CursorLineNr cterm=none ctermfg=2
    highlight LineNr cterm=none ctermfg=2
endfunction

function! SetCursorLineNrColorReplace()
    set updatetime=0
    " Replace mode: red
    highlight CursorLineNr cterm=none ctermfg=1
    highlight LineNr cterm=none ctermfg=1
endfunction

function! SetCursorLineNrColorScript()
    set updatetime=0
    " script mode: blue
    highlight CursorLineNr cterm=bold ctermfg=4
    highlight LineNr cterm=none ctermfg=4
endfunction

function! ResetCursorLineNrColor()
    set updatetime=4000
    highlight CursorLineNr cterm=none ctermfg=3
    highlight LineNr cterm=none ctermfg=3
endfunction

nnoremap <silent> v :call SetCursorLineNrColorVisual()<CR>v
nnoremap <silent> V :call SetCursorLineNrColorVisual()<CR>V
nnoremap <silent> <C-v> :call SetCursorLineNrColorVisual()<CR><C-v>
nnoremap <silent> h :call SetCursorLineNrColorReplace()<CR>r
nnoremap , :call SetCursorLineNrColorScript()<CR>:
nnoremap / :call SetCursorLineNrColorScript()<CR>/

augroup CursorLineNrColorSwap
    autocmd!
    autocmd InsertEnter * call SetCursorLineNrColorInsert(v:insertmode)
    autocmd InsertLeave * call ResetCursorLineNrColor()
    autocmd CursorHold * call ResetCursorLineNrColor()
    au VimEnter * call ResetCursorLineNrColor()
augroup END
