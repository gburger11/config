""""""""""""""""""""""""""""""""""""""""""""""""""
" Todos
""""""""""""""""""""""""""""""""""""""""""""""""""

" for installing vundle:
" git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim

" Make sure to call :PluginInstall in vim after changing the list

" For YouCompleteMe, you must install afterwards:
" cd ~/.vim/bundle/YouCompleteMe
" ./install.py --clang-completer
" or on ubuntu 16:
" python3 ./install.py --clang-completer


""""""""""""""""""""""""""""""""""""""""""""""""""
" Integration of pluggins
""""""""""""""""""""""""""""""""""""""""""""""""""

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" COLORTHEMES
Plugin 'sickill/vim-monokai'
"Bundle 'zeis/vim-kolor'
"Bundle 'altercation/vim-colors-solarized'

" PLUGIN INSTALLER
Plugin 'gmarik/Vundle.vim'

" FILE EXPLORER AND SEARCH
" TODO configure bépo nerdtree
Plugin 'scrooloose/nerdtree'
Bundle 'ctrlpvim/ctrlp.vim'

" SNIPPETS (wtf is this ??)
Bundle 'SirVer/ultisnips'
Bundle 'honza/vim-snippets'

" SYNTAX CONTROLLER AND AUTOCOMPLETION
"Bundle 'scrooloose/syntastic'
Bundle 'maralla/validator.vim'
Bundle 'Valloric/YouCompleteMe'

" COPY THROUGH TMUX
Bundle 'jpalardy/vim-slime'

" SMOOTH MOTION TO HELP READING THROUGH
"Bundle 'yonchu/accelerated-smooth-scroll'
"Bundle 'yuttie/comfortable-motion.vim'
Bundle 'terryma/vim-smooth-scroll'

" HELP TO MOVE ARROUND IN A FILE
"Bundle 'tpope/vim-surround'
Bundle 'easymotion/vim-easymotion'
Plugin 'rbong/vim-vertical'

" LAUNCH GIT FUNCTIONS IN VIM
Bundle 'tpope/vim-fugitive'

" INDENT CLARIFICATION WITH | AND ¦
"Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'Yggdroot/indentLine'

" Add all your plugins here (note older versions of Vundle used Bundle instead of Plugin)
" All of your Plugins must be added before the following line

call vundle#end()            " required
filetype plugin indent on    " requiredenable syntax highlighting


""""""""""""""""""""""""""""""""""""""""""""""""
" syntastic
""""""""""""""""""""""""""""""""""""""""""""""""
"set laststatus=2
"let g:syntastic_python_checkers = ['flake8']
" SyntasticToggleMode "Disable syntastic
" make sure pylint is installed in the virtualenv you use!

""""""""""""""""""""""""""""""""""""""""""""""""
" Validator
""""""""""""""""""""""""""""""""""""""""""""""""
set laststatus=2
let g:validator_python_checkers = ['flake8']

" For flake8
let g:validator_python_flake8_args = '--max-line-length=120'
"let g:validator_python_flake8_binary = '/Users/maralla/.dotfiles/virtualenvs/py27/bin/flake8'

""""""""""""""""""""""""""""""""""""""""""""""""
" configuration for nerdtree
""""""""""""""""""""""""""""""""""""""""""""""""
" active tree shortcut
map <C-n> :NERDTreeToggle<CR>
" ignore files in NERDTree
let NERDTreeIgnore=['\.pyc$', '\~$']


""""""""""""""""""""""""""""""""""""""""""""""
" You Complete Me
""""""""""""""""""""""""""""""""""""""""""""""
" Make UltiSnips compatible with YouCompleteMe
function! g:UltiSnips_Complete()
    call UltiSnips#ExpandSnippet()
    if g:ulti_expand_res == 0
        if pumvisible()
            return "\<C-n>"
        else
            call UltiSnips#JumpForwards()
            if g:ulti_jump_forwards_res == 0
               return "\<TAB>"
            endif
        endif
    endif
    return ""
endfunction

let g:ycm_filetype_whitelist = { 'cpp': 1, 'c': 1, 'python':1 }
" autoclose and go to definition
let g:ycm_autoclose_preview_window_after_completion=1
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>
" do not forget to have leader defined
"let g:ycm_server_python_interpreter = '/usr/bin/python3'
let g:ycm_server_python_interpreter = '/usr/bin/python'
let g:ycm_goto_buffer_command = 'new-tab'
noremap èo :YcmCompleter GoTo<CR>
noremap èé :YcmCompleter GoToReferences<CR>


""""""""""""""""""""""""""""""""""""""""""""""""""
" Easy-motion
""""""""""""""""""""""""""""""""""""""""""""""""""

map w <Plug>(easymotion-prefix)
nmap wj <Plug>(easymotion-t)
nmap wJ <Plug>(easymotion-T)
nmap wé <Plug>(easymotion-w)
nmap wÉ <Plug>(easymotion-W)
nmap wàe <Plug>(easymotion-ge)
nmap wàE <Plug>(easymotion-gE)
nmap wt <Plug>(easymotion-j)
nmap ws <Plug>(easymotion-w)
nmap wr <Plug>(easymotion-sn)
nmap wy <Plug>(easymotion-bd-t)
nmap ww <Plug>(easymotion-bd-f)
nmap wx <Plug>(easymotion-bd-n)
nmap w* <Plug>(easymotion-next)
nmap w# <Plug>(easymotion-prev)
nmap wn <Plug>(easymotion-bd-n)
nmap w. <Plug>(easymotion-repeat)

""""""""""""""""""""""""""""""""""""""""""""""""""
" CtrlP for opening files easily
""""""""""""""""""""""""""""""""""""""""""""""""""
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'
" let g:ctrlp_user_command = ['.git/', 'git ls-files --cached --others  --exclude-standard %s']
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']
" use ctrl+t to open in a new tab


""""""""""""""""""""""""""""""""""""""""""""""""""
" Fast and smooth movements
""""""""""""""""""""""""""""""""""""""""""""""""""
noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 0, 2)<CR>
noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 0, 2)<CR>
noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 0, 4)<CR>
noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 0, 4)<CR>


""""""""""""""""""""""""""""""""""""""""""""""""""
" Slime for sending code to ipython
""""""""""""""""""""""""""""""""""""""""""""""""""
let g:slime_python_ipython = 1 "delete -q in ftplugin/python/slime.vim
let g:slime_target = "tmux"
let g:slimux_select_from_current_window = 1
let g:slime_no_mappings = 1
vmap èy <Plug>SlimeRegionSend
nmap èy <Plug>SlimeLineSend
nmap èY <Plug>SlimeConfig|<Plug>SlimeLineSend
vmap èY <Plug>SlimeConfig|<Plug>SlimeRegionSend


""""""""""""""""""""""""""""""""""""""""""""""""""
" Vertical moving with indents
""""""""""""""""""""""""""""""""""""""""""""""""""

" vertically look for non-empty character
noremap <silent> <c-t> :Vertical f<CR>
noremap <silent> <c-s> :Vertical b<CR>
" require 'stty -ixon' in the .bashrc to disable the freezing behaviour of <c-s>
