default  partial alphanumeric_keys
xkb_symbols "basic" {

    include "latin"

    name[Group1]="French perso";

    key <AE01>	{ [ ampersand,          1,  onesuperior,   exclamdown ]	};
    key <AE02>	{ [    eacute,          2,   asciitilde,    oneeighth ]	};
    key <AE03>	{ [  quotedbl,          3,   numbersign,     sterling ]	};
    key <AE04>	{ [apostrophe,          4,    braceleft,       dollar ]	};
    key <AE05>	{ [ parenleft,          5,  bracketleft, threeeighths ]	};
    key <AE06>	{ [     minus,          6,          bar,  fiveeighths ]	};
    key <AE07>	{ [    egrave,          7,        grave, seveneighths ]	};
    key <AE08>	{ [underscore,          8,    backslash,    trademark ]	};
    key <AE09>	{ [  ccedilla,          9,  asciicircum,    plusminus ]	};
    key <AE10>	{ [    agrave,          0,           at,       degree ]	};
    key <AE11>	{ [parenright,     degree, bracketright, questiondown ]	};
    key <AE12>	{ [     equal,       plus,   braceright,  dead_ogonek ]	};

    key <AD01>	{ [         a,          A,           ae,           AE ]	};
    key <AD02>	{ [         z,          Z, guillemotleft,        less ]	};
    key <AD03>	{ [         e,          E,     EuroSign,         cent ]	};
    key <AD11>	{ [dead_circumflex, dead_diaeresis, dead_diaeresis, dead_abovering ] };
    key <AD12>	{ [    dollar,   sterling,     currency,  dead_macron ]	};

    key <AC01>	{ [         q,          Q,           at,  Greek_OMEGA ]	};
    key <AC10>	{ [         m,          M,           mu,    masculine ]	};
    key <AC11>	{ [    ugrave,    percent, dead_circumflex, dead_caron]	};
    key <TLDE>	{ [twosuperior, asciitilde,     notsign,      notsign ]	};

    key <BKSL>	{ [  asterisk,         mu,   dead_grave,   dead_breve ]	};
    key <AB01>	{ [         w,          W,      lstroke,      Lstroke ]	};
    key <AB07>	{ [     comma,   question,   dead_acute, dead_doubleacute ] };
    key <AB08>	{ [ semicolon,     period, horizconnector,   multiply ]	};
    key <AB09>	{ [     colon,      slash, periodcentered,   division ]	};
    key <AB10>	{ [    exclam,    section, dead_belowdot, dead_abovedot ] };

    include "level3(ralt_switch)"
};


partial alphanumeric_keys modifier_keys
xkb_symbols "bepo_perso" {

    // include "level3(ralt_switch)"
    include "keypad(oss)"

    name[Group1]= "Perso 1";

    key <RALT> { type[group1]="ONE_LEVEL", symbols[group1] = [ISO_Level3_Shift ] };
    key <CAPS> { type[group1]="ONE_LEVEL", symbols[group1] = [ISO_Level3_Shift ] };
    key <BKSL> { type[group1]="ONE_LEVEL", symbols[group1] = [ISO_Level3_Shift ] };
    modifier_map Mod5 { ISO_Level3_Shift };
    key <ESC> { type[group1]="ONE_LEVEL", symbols[group1] = [Escape ] };
    key <AD12> { type[group1]="ONE_LEVEL", symbols[group1] = [Escape] };
    key <LFSH> { type[group1]="TWO_LEVEL", symbols[group1] = [Shift, Caps_Lock ] };
    key <RTSH> { type[group1]="TWO_LEVEL", symbols[group1] = [Shift, Caps_Lock ] };
    modifier_map shift { Shift };
    modifier_map lock { Caps_Lock };

    // First row
    key <TLDE> { [          dollar,   numbersign,        endash,       paragraph ] }; // $ # – ¶
    key <AE01> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [           equal,              notequal,             dagger,       doubledagger ] }; // " 1 — „
    key <AE02> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [           slash,              asterisk,           division,           multiply] }; // « 2 < “
    key <AE03> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [           minus,                  plus,          U2212,              plusminus] }; // » 3 > ”
    key <AE04> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [       parenleft,                 less ,        bracketleft,      lessthanequal ] }; // ( 4 [ ≤
    key <AE05> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [      parenright,               greater,       bracketright,   greaterthanequal ] }; // ) 5 ] ≥
    key <AE06> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [ leftdoublequotemark,            emdash, rightdoublequotemark,  doublelowquotemark ] }; // @ 6 ^
    key <AE07> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [              0 ,                     5,              notsign ] }; // + 7 ± ¬
    key <AE08> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [              1 ,                     6,      guillemotleft,         onequarter ] }; // - 8 − ¼
    key <AE09> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [              2 ,                     7,     guillemotright,            onehalf ] }; // / 9 ÷ ½
    key <AE10> { type[group1] = "FOUR_LEVEL_SEMIALPHABETIC", [              3 ,                     8,       asciicircum ,      threequarters ] }; // * 0 × ¾
    key <AE11> { [               4,            9,         degree,        minutes ] }; // = ° ≠ ′
    key <AE12> { [         percent,        grave,          U2030,        seconds ] }; // % ` ‰ ″

    // Second row
    key <AD01> { [               b,            B,            bar,      brokenbar ] }; // b B | ¦
    key <AD02> { [          eacute,       Eacute,     dead_acute, dead_doubleacute ] }; // é É ˊ ˝
    key <AD03> { [               p,            P,      ampersand,        section ] }; // p P & §
    key <AD04> { [               o,            O,             oe,             OE ] }; // o O œ Œ
    key <AD05> { [          egrave,       Egrave,     dead_grave,          grave ] }; // è È ` `
    key <AD06> { [ dead_circumflex,       exclam,     exclamdown                 ] }; // ^ ! ¡
    key <AD07> { [               v,            V,     dead_caron                 ] }; // v V ˇ
    key <AD08> { [               d,            D,            eth,            ETH ] }; // d D ð Ð
    key <AD09> { [               l,            L,          equal                 ] }; // l L @
    key <AD10> { [               j,            J,          U0133,          U0132 ] }; // j J ĳ Ĳ
    key <AD11> { [               z,            Z,          schwa,          SCHWA ] }; // z Z ə Ə
    // key <AD12> { [     ecircumflex,  Ecircumflex,     dead_breve                 ] }; // w W ̆

    // Third row
    key <AC01> { [               a,            A,             ae,             AE ] }; // a A æ Æ
    key <AC02> { [               u,            U,         ugrave,         Ugrave ] }; // u U ù Ù
    key <AC03> { [               i,            I, dead_diaeresis,  dead_abovedot ] }; // i I ̈ ˙
    // key <AC04> { [               e,            E,       EuroSign,  dead_currency ] }; // e E € ¤
    key <AC04> { [               e,            E,    ecircumflex,     Ecircumflex] }; // e E € ¤
    key <AC05> { [           comma,    semicolon, rightsinglequotemark, dead_horn ] }; // , ; ’ ̛
    // key <AC06> { [               c,            C,      copyright,          U017F ] }; // c C © ſ
    key <AC06> { [               c,            C,       ccedilla,       Ccedilla ] }; // c C © ſ
    key <AC07> { [               t,            T,          thorn,          THORN ] }; // t T þ Þ
    key <AC08> { [               s,            S,         ssharp,          U1E9E ] }; // s S ß ẞ
    key <AC09> { [               r,            R,     registered,      trademark ] }; // r R ® ™
    key <AC10> { [               n,            N,     dead_tilde                 ] }; // n N ~
    key <AC11> { [               m,            M,             at,      masculine ] }; // m M ̄ º
    // key <BKSL> { [        ccedilla,     Ccedilla,   dead_cedilla, dead_belowcomma ] }; // ç Ç ¸ ,

    // Fourth row
    key <LSGT> { [               k,            K,          slash,    dead_stroke ] }; // ê Ê /
    key <AB01> { [          agrave,       Agrave,      backslash                 ] }; // à À \
    key <AB02> { [               y,            Y,      braceleft, leftsinglequotemark  ] }; // y Y { ‘
    key <AB03> { [               x,            X,     braceright, rightsinglequotemark ] }; // x X } ’
    key <AB04> { [          period,        colon,       ellipsis, periodcentered ] }; // . : … ·
    key <AB05> { [               w,            W,     asciitilde                 ] }; // k K ~
    key <AB06> { [      apostrophe,     question,       quotedbl,    questiondown] }; // ' ? ¿ ̉
    key <AB07> { [               q,            Q, dead_abovering,  dead_belowdot ] }; // q Q ˚ ̣
    key <AB08> { [               g,            G,     dead_greek                 ] }; // g G µ
    key <AB09> { [               h,            H,    dead_macron,      dead_hook ] }; // h H † ‡
    key <AB10> { [               f,            F,    dead_ogonek,    ordfeminine ] }; // f F ̨ ª

    key <SPCE> { [           space, nobreakspace,     underscore,          U202F ] }; // ␣ (espace insécable) _ (espace insécable fin)
};

partial alphanumeric_keys modifier_keys
xkb_symbols "bepo_perso_2" {

    include "keypad(oss)"

    name[Group1]= "Perso 2";

    ////////////////////////////////////////
    // Map modifiers                      //
    ////////////////////////////////////////

    // Shift
    key <LFSH> { type[group1]="EIGHT_LEVEL_SEMIALPHABETIC", symbols[group1] = [Shift, Shift, Shift, Shift, Caps_Lock, Caps_Lock, Caps_Lock, Caps_Lock ] };
    key <RTSH> { type[group1]="EIGHT_LEVEL_SEMIALPHABETIC", symbols[group1] = [Shift, Shift, Shift, Shift, Caps_Lock, Caps_Lock, Caps_Lock, Caps_Lock ] };
    // Level 3
    key <CAPS> { type[group1]="EIGHT_LEVEL_SEMIALPHABETIC", symbols[group1] = [ISO_Level3_Shift, ISO_Level3_Shift, ISO_Level3_Shift, ISO_Level3_Shift, ISO_Level3_Lock, ISO_Level3_Lock, ISO_Level3_Lock, ISO_Level3_Lock ] };
    key <BKSL> { type[group1]="EIGHT_LEVEL_SEMIALPHABETIC", symbols[group1] = [ISO_Level3_Shift, ISO_Level3_Shift, ccedilla, Ccedilla, ISO_Level3_Lock, ISO_Level3_Lock, ISO_Level3_Lock, ISO_Level3_Lock ] };
    // Level 5
    key <TLDE> { type[group1]="ONE_LEVEL", symbols[group1] = [ISO_Level5_Shift] };

    ////////////////////////////////////////
    // Compatibility with older pgm       //
    ////////////////////////////////////////
    modifier_map Mod5 { ISO_Level3_Shift };
    modifier_map Mod3 { ISO_Level5_Shift };
    modifier_map shift { Shift };
    modifier_map lock { Caps_Lock };

    ////////////////////////////////////////
    // Map special keys                   //
    ////////////////////////////////////////
    key <ESC> { type[group1]="ONE_LEVEL", symbols[group1] = [Escape ] };
    key <AD12> { type[group1]="ONE_LEVEL", symbols[group1] = [Escape] };
    key <AE12> { type[group1] = "ONE_LEVEL", [Delete] };
    key <RALT> { type[group1] = "ONE_LEVEL", [BackSpace] };
    key <SPCE> { [           space, nobreakspace,          space,          U202F ] }; // ␣ (espace insécable) _ (espace insécable fin)

    ////////////////////////////////////////
    // Symbol row                         //
    ////////////////////////////////////////
    key <AE01> { type[group1] = "FOUR_LEVEL", [     asciicircum,       dead_circumflex,        percent,              permille] };
    key <AE02> { type[group1] = "FOUR_LEVEL", [            less,   leftdoublequotemark,  guillemotleft,      lessthanequal] };
    key <AE03> { type[group1] = "FOUR_LEVEL", [         greater,  rightdoublequotemark, guillemotright,   greaterthanequal] };
    key <AE04> { type[group1] = "FOUR_LEVEL", [       parenleft,                    at  ] };
    key <AE05> { type[group1] = "FOUR_LEVEL", [      parenright,            dead_greek ] };
    key <AE06> { type[group1] = "FOUR_LEVEL", [       Multi_key,              EuroSign,  dead_currency          ] };
    key <AE07> { type[group1] = "FOUR_LEVEL", [           plus ,            dead_caron,           plus,         plusminus ] };
    key <AE08> { type[group1] = "FOUR_LEVEL", [          minus ,            underscore,          minus ] };
    key <AE09> { type[group1] = "FOUR_LEVEL", [          slash ,            numbersign,          slash ] };
    key <AE10> { type[group1] = "FOUR_LEVEL", [       asterisk ,                exclam,       asterisk ,      exclamdown ] };
    key <AE11> { type[group1] = "FOUR_LEVEL", [         dollar ,        dead_diaeresis,         degree,    dead_abovedot ] };

    ////////////////////////////////////////
    // Top letter line                    //
    ////////////////////////////////////////
    key <AD01> { [               b,            B,            bar,      brokenbar ] }; // b B | ¦
    key <AD02> { [          eacute,       Eacute,     dead_acute, dead_doubleacute ] }; // é É ˊ ˝
    key <AD03> { [               p,            P,      ampersand,        section ] }; // p P & §
    key <AD04> { [               o,            O,             oe,             OE ] }; // o O œ Œ
    key <AD05> { [          egrave,       Egrave,          grave,     dead_grave ] }; // è È ` `
    key <AD06> { [ dead_circumflex,   dead_caron,      period ] };
    key <AD07> { type[group1] = "EIGHT_LEVEL_SEMIALPHABETIC", [   v,   V,  6, 6,  Home, Home, Home, Home  ] };
    key <AD08> { type[group1] = "EIGHT_LEVEL_SEMIALPHABETIC", [   d,   D,  7, 7, End, End, End, End ] };
    key <AD09> { [               l,            L,              8,             8 ] }; // l L @
    key <AD10> { [               j,            J,              9,             9 ] }; // j J ĳ Ĳ
    key <AD11> { [               z,            Z,          equal,         equal ] }; // z Z ə Ə

    ////////////////////////////////////////
    // Middle letter line                 //
    ////////////////////////////////////////
    key <AC01> { [               a,            A,             ae,             AE ] }; // a A æ Æ
    key <AC02> { [               u,            U,         ugrave,         Ugrave ] }; // u U ù Ù
    key <AC03> { [               i,            I,     idiaeresis,     Idiaeresis ] }; // i I ̈ ˙
    key <AC04> { [               e,            E,    ecircumflex,     Ecircumflex] }; // e E € ¤
    key <AC05> { [           comma,    semicolon, rightsinglequotemark, dead_horn ] }; // , ; ’ ̛
    key <AC06> { type[group1] = "EIGHT_LEVEL_SEMIALPHABETIC", [               c,            C,              0 , dead_cedilla, Left, Left, Left, Left] }; // c C © ſ
    key <AC07> { type[group1] = "EIGHT_LEVEL_SEMIALPHABETIC", [               t,            T,              1,     onequarter, Down, Down, Down, Down ] }; // t T þ Þ
    key <AC08> { type[group1] = "EIGHT_LEVEL_SEMIALPHABETIC", [               s,            S,              2,        onehalf, Up, Up, Up, Up ] }; // s S ß ẞ
    key <AC09> { type[group1] = "EIGHT_LEVEL_SEMIALPHABETIC", [               r,            R,              3,  threequarters, Right, Right, Right, Right ] }; // r R ® ™
    key <AC10> { [               n,            N,              4                 ] }; // n N ~
    key <AC11> { [               m,            M,              5 ] }; // m M ̄ º

    ////////////////////////////////////////
    // Bottom letter line                 //
    ////////////////////////////////////////
    key <LSGT> { [               k,            K,          slash,    dead_stroke ] }; // ê Ê /
    key <AB01> { [          agrave,       Agrave,      backslash                 ] }; // à À \
    key <AB02> { [               y,            Y,      braceleft, leftsinglequotemark  ] }; // y Y { ‘
    key <AB03> { [               x,            X,     braceright, rightsinglequotemark ] }; // x X } ’
    key <AB04> { [          period,        colon,       ellipsis, periodcentered ] }; // . : … ·
    key <AB05> { [               w,            W,     asciitilde                 ] }; // k K ~
    key <AB06> { [      apostrophe,     question,       quotedbl,    questiondown] }; // ' ? ¿ ̉
    key <AB07> { type[group1] = "EIGHT_LEVEL_SEMIALPHABETIC", [               q,            Q,      parenleft, parenleft, Prior, Prior, Prior, Prior ] }; // q Q ˚ ̣
    key <AB08> { type[group1] = "EIGHT_LEVEL_SEMIALPHABETIC", [               g,            G,    bracketleft, bracketleft, Next, Next, Next, Next ] }; // g G µ
    key <AB09> { [               h,            H,   bracketright ] }; // h H † ‡
    key <AB10> { [               f,            F,     parenright ] }; // f F ̨ ª
};
